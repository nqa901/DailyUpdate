/*关于堆和栈
1.数据已知固定大小放入栈中，数据大小未知或者大小可变的数据放入堆中

2.由于大小固定，指向堆地址的指针放入栈中

3.处理栈上数据比处理堆上数据快
*/



/*所有权原则
1.每个值都有一个变量作为其所有者
2.值只能有一个所有者
3.当所有者超出作用域，值将被丢弃 (drop)
*/


//转移所有权


fn main(){
    //基本数据类型在栈上，非常容易拷贝
    let x = 5;
    let y = x;
    println!("x = {}, y = {}",x,y);


    /*以String类型为例, String类型不是基本类型
      包含堆指针、字符串长度（当前长度）、字符串容量（分配空间大小）
      String类型在堆上，拷贝时只拷贝指向堆的指针
     */


    /*关于赋值
    s1 赋予 s2, 认为是s1不再有效，s2有效
    即所有权发生了转移
    从这个角度看，定义let a = b可以认为是b转移所有权给a，作为变量绑定
    */
    

    //此处所有权没有发生转移，由于字符串在堆上，s1只是引用了字符串，并没有持有所有权
    let s1 : &str = "Hello world!";
    let s2 = s1;
    println!("s1 = {}, s2 = {}",s1,s2);


    //如果想要深拷贝String在堆上的数据，需要使用clone方法
    let s3 = String::from("hello");
    let s4 = s3.clone();
    println!("s3 = {}, s4 = {}", s3, s4);


    //与此相对的，浅拷贝发生在栈上，可以参考前面的例子（见23行）
    //由于整型数据大小固定已知

    
}
